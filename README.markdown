# Блог-приложение

## Описание проекта
Это учебный проект блог-приложения, разработанный для изучения современных технологий веб-разработки. Приложение позволяет пользователям регистрироваться, входить в систему, создавать посты, просматривать профили других пользователей, редактировать свой профиль, а также лайкать и удалять посты. Проект состоит из двух частей: фронтенда (React) и бэкенда (FastAPI), которые взаимодействуют через REST API.

## Основные функции
- **Регистрация и авторизация**: Пользователи могут создавать аккаунты и входить в систему.
- **Управление профилем**: Пользователи могут просматривать и обновлять свои профили.
- **Создание и управление постами**: Пользователи могут создавать, редактировать и удалять свои посты.
- **Лайки постов**: Пользователи могут лайкать и убирать лайки с постов.
- **Просмотр списка пользователей**: Доступен список всех зарегистрированных пользователей.
- **Просмотр постов**: Пользователи могут просматривать посты на главной странице и в профилях пользователей.

## Используемые технологии

### Фронтенд
- **React**: Библиотека для создания пользовательских интерфейсов.
- **React Router**: Для маршрутизации в приложении.
- **Material-UI (MUI)**: Библиотека компонентов для стилизации интерфейса.
- **Axios**: Для выполнения HTTP-запросов к бэкенду.
- **React Context API**: Для управления состоянием авторизации и загрузки.

### Бэкенд
- **FastAPI**: Фреймворк для создания REST API.
- **SQLAlchemy**: ORM для работы с базой данных.
- **SQLite**: Лёгкая база данных (используется в разработке).
- **PyJWT**: Для работы с JSON Web Tokens (JWT) для авторизации.
- **Passlib**: Для хеширования паролей.

## Структура проекта

### Фронтенд (`frontend/`)
```
frontend/
├── src/
│   ├── components/
│   │   ├── Auth.js         # Компонент для входа в систему
│   │   ├── Header.js       # Компонент шапки приложения
│   │   ├── Home.js         # Главная страница с постами
│   │   ├── Post.js         # Компонент отдельного поста
│   │   ├── Profile.js      # Страница профиля пользователя
│   │   ├── Sign.js         # Компонент для регистрации
│   │   ├── Update.js       # Компонент для обновления профиля
│   │   └── Users.js        # Страница со списком пользователей
│   ├── contexts/
│   │   ├── AuthContext.js  # Контекст для управления авторизацией
│   │   └── LoadingContext.js # Контекст для управления состоянием загрузки
│   ├── services/
│   │   ├── axiosInstance.js # Настройка Axios для HTTP-запросов
│   │   ├── postService.js   # Сервис для работы с постами
│   │   └── userService.js   # Сервис для работы с пользователями
│   ├── App.js              # Главный компонент приложения
│   ├── index.js            # Точка входа для React
│   └── index.css           # Глобальные стили
├── package.json            # Зависимости и скрипты фронтенда
└── README.md               # Документация (этот файл)
```

### Бэкенд (`backend/`)
```
backend/
├── database.py             # Настройка подключения к базе данных
├── main.py                 # Точка входа для FastAPI
├── models.py               # Модели SQLAlchemy (User, Post)
├── repositories.py         # Репозитории для работы с базой данных
├── routers.py              # Маршруты API
├── schemas.py              # Схемы Pydantic для валидации данных
├── services.py             # Сервисы (например, для авторизации)
└── requirements.txt        # Зависимости бэкенда
```

## Установка и запуск

### Требования
- **Node.js** (версия 16 или выше) для фронтенда.
- **Python** (версия 3.9 или выше) для бэкенда.
- **Git** для клонирования репозитория.
- **PostgreSQL** для базы данных

### Шаг 1: Клонирование репозитория
```bash
git clone <repository-url>
cd <repository-name>
```

### Шаг 2: Настройка бэкенда
1. Перейдите в директорию бэкенда:
   ```bash
   cd backend
   ```
2. Создайте виртуальное окружение и активируйте его:
   ```bash
   python -m venv .venv
   source .venv/bin/activate  # На Windows: .venv\Scripts\activate
   ```
3. Установите зависимости:
   ```bash
   pip install -r requirements.txt
   ```
4. Запустите бэкенд:
   ```bash
   uvicorn main:app --reload
   ```
   Сервер будет запущен на `http://localhost:8000`.

### Шаг 3: Настройка фронтенда
1. Перейдите в директорию фронтенда:
   ```bash
   cd frontend
   ```
2. Установите зависимости:
   ```bash
   npm install
   ```
3. Запустите фронтенд:
   ```bash
   npm start
   ```
   Приложение будет доступно на `http://localhost:3000`.

### Шаг 4: Настройка и проверка миграции
- Откройте терминал и введите туда команду
  ```bash
   alembic upgrade head
  ```
- После ввода данной команды должна установиться последняя версия базы данных (Например вот токое имя может быть у неё: Версия - 9e527ed9f4ce, Имя - Initial migration)


### Шаг 5: Проверка работы
- Откройте браузер и перейдите на `http://localhost:3000`.
- Зарегистрируйте нового пользователя через страницу `/sign`.
- Войдите в систему через страницу `/auth`.
- Проверьте функционал: создайте пост, отредактируйте профиль, поставьте лайк посту.

## API Эндпоинты
Бэкенд предоставляет следующие основные эндпоинты:

| Метод | Эндпоинт                  | Описание                          | Требуется авторизация |
|-------|---------------------------|-----------------------------------|-----------------------|
| POST  | `/users/`                | Регистрация нового пользователя   | Нет                   |
| POST  | `/users/login`           | Вход в систему                    | Нет                   |
| GET   | `/users/`                | Получение списка пользователей    | Да                    |
| GET   | `/users/{user_id}`       | Получение данных пользователя     | Да                    |
| PUT   | `/users/{user_id}`       | Обновление профиля пользователя   | Да (только свой)      |
| DELETE| `/users/{user_id}`       | Удаление пользователя             | Да (только свой)      |
| POST  | `/users/{user_id}/posts/`| Создание поста                    | Да (только свой)      |
| GET   | `/users/{user_id}/posts/`| Получение постов пользователя     | Да                    |
| GET   | `/users/posts/`          | Получение всех постов (с пагинацией) | Нет                |
| PUT   | `/users/posts/{post_id}` | Обновление поста                  | Да (только свой)      |
| DELETE| `/users/posts/{post_id}` | Удаление поста                    | Да (только свой)      |
| POST  | `/users/posts/{post_id}/like/` | Лайк поста                   | Да                    |
| DELETE| `/users/posts/{post_id}/like/` | Удаление лайка               | Да                    |

## Авторизация
- Приложение использует JWT-токены для авторизации.
- После успешного входа токен сохраняется в `localStorage` на фронтенде и отправляется в заголовке `Authorization: Bearer <token>` для защищённых запросов.
- Защищённые маршруты требуют валидный токен. Если токен отсутствует или недействителен, возвращается ошибка `401 Unauthorized` или `403 Forbidden`.

